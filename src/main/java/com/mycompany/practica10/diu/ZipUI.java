package com.mycompany.practica10.diu;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.SwingWorker;

public class ZipUI extends javax.swing.JFrame {

    private Tarea tarea;
    private int isComprimed = 1;
    private int progreso = 0;
    public final List<String> files;
    public final String directory;
    private ZipOutputStream out;
    
    public ZipUI(List<String> files, String directory) {
        initComponents();
        this.files = files;
        this.directory = directory;
        barraProgreso.setStringPainted(true);
        barraProgreso.setMaximum(this.files.size());
    }


    private class Tarea extends SwingWorker<Void, Void>{

        
        @Override
        protected Void doInBackground() throws Exception {
            
            //isComprimed = zip.comprimir();
             int BUFFER_SIZE = 1024;
            try {
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
                // Objeto para referenciar el archivo zip de salida
                File m = new File(directory);

                FileOutputStream dest = new FileOutputStream(directory + ".zip");
                out = new ZipOutputStream(new BufferedOutputStream(dest));
                
                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[BUFFER_SIZE];
                Iterator i = files.iterator();
                
                while(i.hasNext()) {
                    barraProgreso.setValue(progreso);
                    String filepath = (String) i.next();
                    File file = new File(filepath);
                    FileInputStream fi = new FileInputStream(filepath);
                    origin = new BufferedInputStream(fi, BUFFER_SIZE);
                    ZipEntry entry = new ZipEntry( file.getName() );
                    out.putNextEntry( entry );
                    // Leemos datos desde el archivo origen y se envían al archivo destino
                    int count;
                    while((count = origin.read(data, 0, BUFFER_SIZE)) != -1) {
                        out.write(data, 0, count);
                    }
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                    progreso++;
                    Thread.sleep(1000);
                }
                // Cerramos el archivo zip
                out.close();
                barraProgreso.setValue(progreso);
                isComprimed = 0;
            } catch(IOException e){
                e.printStackTrace();
                isComprimed = -1;
            }   
            return null;
        }
        
        @Override
        public void done(){
            if(isComprimed == 0){
                titleLabel.setText("Tarea terminada");
            }else if ( isComprimed == -1){
                titleLabel.setText("Tarea cancelada");
            }
            cancelarButton.setEnabled(false);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        comenzarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        barraProgreso = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Comprimiendo archivos");
        setResizable(false);

        comenzarButton.setText("Comenzar");
        comenzarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comenzarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.setEnabled(false);
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        titleLabel.setText("Iniciar compresión:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(comenzarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelarButton)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(33, 33, 33)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comenzarButton)
                    .addComponent(cancelarButton))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comenzarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comenzarButtonActionPerformed
        tarea = new Tarea();
        tarea.execute();
        titleLabel.setText("Comprimiendo...");
        comenzarButton.setEnabled(false);
        cancelarButton.setEnabled(true);
    }//GEN-LAST:event_comenzarButtonActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        tarea.cancel(true);
        isComprimed = -2;
        comenzarButton.setEnabled(true);
        cancelarButton.setEnabled(false);
        try {
            out.close();
            File f = new File(directory+".zip");
            f.delete();
        } catch (IOException ex) {
            Logger.getLogger(ZipUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_cancelarButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JButton comenzarButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
